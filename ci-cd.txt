1. what is ci/cd ?

    A CI/CD or Continuous Integration/Continuous Deployment pipeline implementation helps to automate steps in the software delivery process such as initiating code builds, running automated tests, and deploying to a staging or production environment.

    CI, short for continuous integration, is a software development practice in which all developers merge code changes in a central repository multiple times a day.

    CD stands for continuous delivery which, on top of continuous integration, adds the practice of automating the entire software release process.

    Continuous integration and continuous delivery require continuous testing because the objective is to deliver quality applications and code to users. Continuous testing is often implemented as a set of automated regression, performance, and other tests that are executed in the CI/CD pipeline.


    Build -> Test -> Deploy

2. Advantages of implementing a CI/CD pipeline
    Developers don’t have to worry about runtime configurations in their code since those are already configured.

    Testers can see what tests have been automatically run and then automate more, investigate trouble areas, or simply spend their time on the new functionality to validate it against client requirements.

    Operations can redeploy if something isn’t working inside an application.

    Introducing new versions or bug fixes is the same routine process.

    The velocity of deployments is increased, and new features reach the production stage much faster.

    The most popular automation tools are Jenkins (formerly Hudson), CircleCI, CodeSHIP, and Shippable.